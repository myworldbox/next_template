import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { CoreEnum } from "./core/core_enum";
import "./globals.css";
import GraphNet from "./item/graph/graph_net";
import GraphMatrix from "./item/graph/graph_matrix";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  const Step = CoreEnum.Step;

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}

        <GraphMatrix focus="A" relations={
          [
            // { from: "B", to: "C", type: Step.prev },
            // { from: "A", to: "H", type: Step.prev },

            { from: "H", to: "I", type: Step.parallel },
            { from: "A", to: "B", type: Step.parallel },
            { from: "C", to: "D", type: Step.parallel },
            { from: "K", to: "L", type: Step.parallel },

            { from: "C", to: "B", type: Step.next },
            { from: "H", to: "A", type: Step.next },
            { from: "C", to: "E", type: Step.next },
            { from: "A", to: "G", type: Step.next },
            { from: "A", to: "F", type: Step.next },
            { from: "H", to: "J", type: Step.next },
            { from: "H", to: "K", type: Step.next },
            { from: "K", to: "M", type: Step.next },
          ]
        } />

        <GraphNet focus="A" relations={
          [
            { from: "B", to: "C", type: Step.prev },
            { from: "A", to: "H", type: Step.prev },

            { from: "H", to: "I", type: Step.parallel },
            { from: "A", to: "B", type: Step.parallel },
            { from: "C", to: "D", type: Step.parallel },
            { from: "K", to: "L", type: Step.parallel },

            { from: "C", to: "E", type: Step.next },
            { from: "A", to: "G", type: Step.next },
            { from: "A", to: "F", type: Step.next },
            { from: "H", to: "J", type: Step.next },
            { from: "H", to: "K", type: Step.next },
            { from: "K", to: "M", type: Step.next },
          ]
        } />

        <GraphNet focus="A" relations={
          [
            { from: "B", to: "C", type: Step.prev },
            { from: "A", to: "B", type: Step.prev },
            { from: "C", to: "D", type: Step.parallel },
            { from: "A", to: "E", type: Step.parallel },
            { from: "E", to: "F", type: Step.prev },
            { from: "F", to: "G", type: Step.parallel },
          ]
        } />

        <GraphNet focus="司馬懿" relations={
          [
            { from: "司馬防", to: "司馬懿", type: Step.next },
            { from: "司馬懿", to: "王凌", type: Step.parallel },
            { from: "司馬懿", to: "柏夫人", type: Step.parallel },
            { from: "司馬懿", to: "諸葛亮", type: Step.parallel },
            { from: "司馬懿", to: "曹真", type: Step.parallel },
            { from: "秦伯南", to: "曹真", type: Step.next },
            { from: "曹真", to: "曹爽", type: Step.next },
            { from: "柏夫人", to: "司馬倫", type: Step.next },
            { from: "司馬懿", to: "司馬師", type: Step.next },
            { from: "司馬懿", to: "司馬昭", type: Step.next },
            { from: "司馬懿", to: "司馬亮", type: Step.next },
            { from: "司馬懿", to: "司馬倫", type: Step.next },
            { from: "司馬懿", to: "司馬馗", type: Step.next },
            { from: "司馬懿", to: "司馬伷", type: Step.next },
            { from: "司馬伷", to: "司馬覲", type: Step.next },
            { from: "司馬覲", to: "司馬睿", type: Step.next },
            { from: "司馬倫", to: "司馬荂", type: Step.next },
            { from: "司馬昭", to: "司馬炎", type: Step.next },
            { from: "司馬昭", to: "司馬攸", type: Step.next },
            { from: "司馬炎", to: "司馬衷", type: Step.next },
            { from: "司馬炎", to: "司馬冏", type: Step.next },
            { from: "司馬炎", to: "司馬穎", type: Step.next },
            { from: "司馬炎", to: "司馬瑋", type: Step.next },
            { from: "司馬炎", to: "司馬乂", type: Step.next },
            { from: "司馬炎", to: "司馬越", type: Step.next },
            { from: "司馬炎", to: "司馬遲", type: Step.next },
            { from: "司馬炎", to: "司馬柬", type: Step.next },
            { from: "司馬柬", to: "司馬鄴", type: Step.next },
            { from: "司馬睿", to: "司馬邵", type: Step.next },
            { from: "司馬邵", to: "司馬衍", type: Step.next },
            { from: "司馬邵", to: "司馬岳", type: Step.next },
            { from: "司馬岳", to: "司馬聃", type: Step.next },
            { from: "司馬衍", to: "司馬丕", type: Step.next },
            { from: "司馬衍", to: "司馬奕", type: Step.next },
            { from: "司馬睿", to: "司馬昱", type: Step.next },
            { from: "司馬昱", to: "司馬道子", type: Step.next },
            { from: "司馬道子", to: "司馬曜", type: Step.next },
            { from: "司馬曜", to: "司馬德宗", type: Step.next },
            { from: "司馬曜", to: "司馬德文", type: Step.next }
          ]
        } />

        <GraphNet focus="A" relations={
          [
            // 🔁 Parallel relationships (bidirectional, non-hierarchical)
            { from: 'A', to: 'B', type: Step.parallel },
            { from: 'B', to: 'A', type: Step.parallel },
            { from: 'C', to: 'D', type: Step.parallel },
            { from: 'D', to: 'C', type: Step.parallel },
            { from: 'E', to: 'F', type: Step.parallel },
            { from: 'F', to: 'E', type: Step.parallel },
            { from: 'G', to: 'H', type: Step.parallel },
            { from: 'H', to: 'G', type: Step.parallel },

            // ⏪ Prev chain (hierarchical)
            { from: 'A', to: 'C', type: Step.prev },
            { from: 'C', to: 'E', type: Step.prev },
            { from: 'E', to: 'G', type: Step.prev },
            { from: 'G', to: 'I', type: Step.prev },
            { from: 'I', to: 'K', type: Step.prev },
            { from: 'K', to: 'M', type: Step.prev },
            { from: 'M', to: 'O', type: Step.prev },
            { from: 'O', to: 'Q', type: Step.prev },
            { from: 'Q', to: 'S', type: Step.prev },
            { from: 'S', to: 'U', type: Step.prev },
            { from: 'U', to: 'W', type: Step.prev },
            { from: 'W', to: 'Y', type: Step.prev },

            // ⏩ Next chain (nonlinear jumps)
            { from: 'B', to: 'D', type: Step.next },
            { from: 'D', to: 'F', type: Step.next },
            { from: 'F', to: 'H', type: Step.next },
            { from: 'H', to: 'J', type: Step.next },
            { from: 'J', to: 'L', type: Step.next },
            { from: 'L', to: 'N', type: Step.next },
            { from: 'N', to: 'P', type: Step.next },
            { from: 'P', to: 'R', type: Step.next },
            { from: 'R', to: 'T', type: Step.next },
            { from: 'T', to: 'V', type: Step.next },
            { from: 'V', to: 'X', type: Step.next },
            { from: 'X', to: 'Z', type: Step.next },

            // 🧩 Cross-links for complexity
            { from: 'A', to: 'J', type: Step.next },
            { from: 'C', to: 'L', type: Step.next },
            { from: 'E', to: 'N', type: Step.next },
            { from: 'G', to: 'P', type: Step.next },
            { from: 'I', to: 'R', type: Step.next },
            { from: 'K', to: 'T', type: Step.next },
            { from: 'M', to: 'V', type: Step.next },
            { from: 'O', to: 'X', type: Step.next },
            { from: 'Q', to: 'Z', type: Step.next },

            // 🔄 Loopbacks using parallel (no contradiction)
            { from: 'Z', to: 'A', type: Step.parallel },
            { from: 'Y', to: 'B', type: Step.parallel },
            { from: 'X', to: 'C', type: Step.parallel },

            // 🧠 Forks and merges
            { from: 'D', to: 'I', type: Step.next },
            { from: 'F', to: 'K', type: Step.next },
            { from: 'H', to: 'M', type: Step.next },
            { from: 'J', to: 'O', type: Step.next },
            { from: 'L', to: 'Q', type: Step.next },
            { from: 'N', to: 'S', type: Step.next },
            { from: 'P', to: 'U', type: Step.next },
            { from: 'R', to: 'W', type: Step.next },
            { from: 'T', to: 'Y', type: Step.next }
          ]
        } />
      </body>
    </html>
  );
}
